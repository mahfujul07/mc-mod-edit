{
	"_comment-1" : "This example file would correspond to entity example_mod:example_entity, if such existed.",
	"_comment-2" : "The other file named 'example_entity_uncommented.json' is a version of the same definition but without any comments.",
	
	"_comment0" : "If you want to add entity type variant support (within the same entity type ID, for example 'minecraft:iron_golem'), change the 'variantIdBuilderMethod' value to a static method ...",
	"_comment1" : "... that accepts (StringBuilder, EntityRenderer, Entity) and returns void after appending the variant ID to the StringBuilder. Performance is very important here because the method is called for every entity.",
	"_comment2" : "You'll have to make a Forge/Fabric mod of your own or add some code to an existing mod to define your own method(s). The JSON resources can be built into the mod as well.",
	"_comment3" : "The default method xaero.common.minimap.render.radar.EntityIconDefinitions.buildVariantIdString appends some property values to the entity's main texture location, ...",
	"_comment4" : "... which already supports a lot of entity type variants, even for some modded entity types.",
	"_comment401" : "If you set the 'debugEntityVariantIds' option in the minimap config file to true, then the variant IDs of newly encountered entities (variants) will be printed in the chat and the log/console.",
	"_comment5" : "For example: 'minecraft:textures/entity/iron_golem/iron_golem.png%MEDIUM' is one of the variant IDs for the iron golem entity type, where the 'damage' value 'MEDIUM' is appended to the texture location.",
	
	"variantIdBuilderMethod" : "xaero.common.minimap.render.radar.EntityIconDefinitions.buildVariantIdString", 
	
	
	"_comment6" : "The following key-value map lets you define icons for all or specific variants of the entity type that this file corresponds to.",
	"_comment7" : "The key of a map entry is the String identifier of the entity type variant, for example 'minecraft:textures/entity/iron_golem/iron_golem.png%MEDIUM' or 'default'.",
	"_comment8" : "The value of a map entry is the icon type to be used for entities that correspond to the entry key, for example 'model', 'model:3', 'dot', 'normal_sprite:example.png' or 'outlined_sprite:example.png'.",
	
	"_comment10" : "The entry value 'model' means that the default model-based renderer should be used to render the icon for the entity type variant. Mod support is not guaranteed.",
	"_comment11" : "For example:",
	"_comment12" : "'minecraft:textures/entity/iron_golem/iron_golem.png%MEDIUM' : 'model'",
	
	"_comment14" : "The entry value 'normal_sprite:example.png' means that the image file at assets/xaerominimap/entity/icon/sprite/example.png should be used as the icon for the entity type variant.",
	"_comment15" : "The recommended image size is 64x64 pixels. Keep in mind that there is usually a lot of empty space in the icon image around the rendered icon itself.",
	"_comment16" : "For example:",
	"_comment17" : "'minecraft:textures/entity/iron_golem/iron_golem.png%MEDIUM' : 'normal_sprite:minecraft_iron_golem_medium.png'",
	
	"_comment108" : "The entry value 'outlined_sprite:example.png' also means that the image file at assets/xaerominimap/entity/icon/sprite/example.png should be used as the icon for the entity type variant.",
	"_comment112" : "The contents of the image will be automatically outlined with black, similarly to model-based icons.",
	"_comment109" : "The recommended image size is 64x64 pixels. Keep in mind that there is usually a lot of empty space in the icon image around the rendered icon itself.",
	"_comment110" : "For example:",
	"_comment111" : "'minecraft:textures/entity/iron_golem/iron_golem.png%MEDIUM' : 'outlined_sprite:minecraft_iron_golem_medium.png'",
	
	"_comment101" : "The entry value 'dot' means that the icon is not displayed for the entity type variant and the colored dot is displayed instead.",
	"_comment102" : "For example:",
	"_comment103" : "'minecraft:textures/entity/iron_golem/iron_golem.png%MEDIUM' : 'dot'",
	
	"_comment105" : "The entry value 'model:0' means that the model-based renderer is used and it is configured by the configuration defined in 'modelConfigs' at position 0.",
	"_comment106" : "For example:",
	"_comment107" : "'minecraft:textures/entity/iron_golem/iron_golem.png%MEDIUM' : 'model:1'",
	
	"_comment19" : "The entry key 'default' is used if a unique value is not bound to the actual entity type variant ID.",

	"variants" : {
		"example_mod:textures/entity/example_entity/example_entity.png%HAPPY%YELLOW%5" : "model:1",
		"default" : "model:0"
	},
	
	
	"_comment201" : "The following key 'modelConfigs' defines a list of configurations that can be used for the model-based rendering.",
	"_comment202" : "Your own 'modelConfigs' list can contain as many configurations as you want.",
	
	"modelConfigs" : [
		{
			"_comment301" : "This is the configuration at position 0 (first), which is used for the variant 'default' in this example.",
			
			
			"_comment203" : "Option 'baseScale' sets the base scale of the model rendered in the icon. The default value is 1.0.",
			"baseScale" : 1.0,
			
			"_comment204" : "Option 'rotationY' sets the additional Y-rotation (yaw) of the model rendered in the icon. The default value is 0. The rotation order is always YXZ.",
			"rotationY" : 0,
			
			"_comment205" : "Option 'rotationX' sets the additional X-rotation (pitch) of the model rendered in the icon. The default value is 0. The rotation order is always YXZ.",
			"rotationX" : 0,
			
			"_comment206" : "Option 'rotationZ' sets the additional Z-rotation (roll) of the model rendered in the icon. The default value is 0. The rotation order is always YXZ.",
			"rotationZ" : 0,
			
			"_comment207" : "Option 'offsetX' sets the X-offset of the model rendered in the icon. The default value is 0.",
			"offsetX" : 0,
			
			"_comment208" : "Option 'offsetY' sets the Y-offset of the model rendered in the icon. The default value is 0.",
			"offsetY" : 0,
			
			"_comment209" : "Option 'modelPartsFields' sets the list of fields to be resolved in order to get the model parts to be rendered in the icon.",
			"_comment210" : "By default, the mod tries to determine the model parts on its own and might fail to do so correctly.",
			"_comment211" : "The field must reference a model part (ModelRenderer class on Forge), an array of them or a collection of them (e.g. list, map).",
			"_comment245" : "The fields will be resolved against the root model instance (not necessarily an EntityModel instance) which is determined by the 'modelRootPath' option.",
			"_comment212" : "Fields that cannot be resolved are simply ignored, so this automatically supports path/name aliases for different environments (e.g. mod loaders).",
			"_comment213" : "In this example, 'nose' is the deobfuscated name of the field that references the nose part of the model.",
			"_comment214" : "In this example, 'field_123123' is the obfuscated name of the field that references the nose part of the model.",
			"_comment215" : "In this example, the 'headModel' field is declared in a superclass 'QuadrupedModel' of the main model class 'ExampleEntityModel'.",
			"_comment216" : "In this example, the 'spikes' field references a collection (e.g. ArrayList, Map) or an array (ModelRenderer[]) of model parts. All elements of it are rendered.",
			"_comment217" : "In this example, the 'ears[0,1]' field references a collection (e.g. ArrayList, Map) or an array (ModelRenderer[]) of model parts. Only elements at positions 0 and 1 are rendered.",
			"_comment246" : "In this example, the children['hair','left_ear','right_ear'] field references a Map of model parts. Only elements for keys 'hair' , 'left_ear' snd 'right_ear' are rendered.",
			"_comment247" : "The children['hair','left_ear','right_ear'] reference would work if the 'modelRootPath' option set a ModelRenderer as the root model instance.",
			"_comment218" : "Only the first occurence of the same field is taken into account, so you cannot separate ears[0,1] into ears[0] and ears[1].",
			"modelPartsFields" : [
				"path.to.model.class.ExampleEntityModel;nose",
				"path.to.model.class.ExampleEntityModel;field_123123",
				"net.minecraft.client.renderer.entity.model.QuadrupedModel;headModel",
				"path.to.model.class.ExampleEntityModel;spikes",
				"path.to.model.class.ExampleEntityModel;ears[0,1]",
				"net.minecraft.client.renderer.entity.model.ModelRenderer;children['hair','left_ear','right_ear']"
			],
			
			"_comment219" : "Option 'modelMainPartFieldAliases' sets the list of aliases for the field to be resolved before any other.",
			"_comment220" : "This determines the main model part which is rendered in the center of the icon. At maximum only 1 model part will be rendered from this list.",
			"_comment221" : "Every other model part (e.g. from 'modelPartsFields') is rendered relative to this model part (the main part).",
			"_comment222" : "The field aliases listed here don't have to be listed in 'modelPartsFields'. In fact, you don't have to define 'modelPartsFields' at all to just change the main part.",
			"modelMainPartFieldAliases" : [
				"path.to.model.class.ExampleEntityModel;head",
				"path.to.model.class.ExampleEntityModel;field_124124"
			],
			
			"_comment233" : "Option 'modelRootPath' sets the path that consists of 1 or more alias lists for the fields to be resolved in a chain starting from the main model instance (EntityModel) in order ...",
			"_comment234" : "... to finally fetch the instance that will actually be used by the current model configuration. Everything in 'modelPartsFields' and 'modelMainPartFieldAliases' will be resolved ...",
			"_comment235" : "... against the final destination of the path. Each element in the 'modelRootPath' list should be a list of aliases for the field to be resolved against the object that was fetched ...",
			"_comment236" : "... using the previous alias list.",
			"_comment237" : "The fields can reference objects of any type, for example other model instances or even a ModelRenderer (ModelPart), but it could literally be anything.",
			"_comment238" : "Referencing a single element of an array or a collection works the same way that collection references work in 'modelPartsFields' (e.g. parts[0] or children['head'])",
			"_comment239" : "",
			"_comment240" : "To give an example of using 'modelRootPath', the slime entity model in 1.17+ has a single root model part that then references every actual part of the model. Simply referencing ...",
			"_comment241" : "... the root model part in 'modelPartsFields' does not work because then the model is rendered offset due to how the other slime model parts are positioned relative to ...",
			"_comment242" : "... the root. The field for the root model part reference of the slime model is the following on Fabric: 'net.minecraft.client.render.entity.model.SlimeEntityModel;root'. ",
			"_comment243" : "This requires the 'modelRootPath' list to contain a single alias list for 'net.minecraft.client.render.entity.model.SlimeEntityModel;root'. ",
			"_comment244" : "In fact, most vanilla mobs in 1.17 work similar to that. Check out a working example file in minecraft/axolotl.json.",
			"modelRootPath" : [
				[
					"net.minecraft.client.render.entity.model.SlimeEntityModel;root",
					"net.minecraft.class_609;field_27499"
				],
				[
					"If SlimeEntityModel;root wasn't the final destination, we would put another field reference here that would be resolved against SlimeEntityModel;root."
				],
				[
					"And this third one would be resolved against the result of resolving the second alias list."
				]
			],
			
			"_comment223" : "Option 'renderingFullModel' tells the mod whether to make an attempt to render the whole entity model (ignoring 'modelPartsFields').",
			"_comment224" : "By default, the value is determined by a hardcoded function, but this config option overrides it.",
			"renderingFullModel" : false,
			
			"_comment225" : "Option 'modelPartsRotationReset' tells the mod whether it should reset all rotation of every model part to 0. The default value is true.",
			"_comment226" : "For example, you would not want the rotation to reset for some model parts that are supposed to be rotated, for example the body box of the pig model.",
			"_comment230" : "This value is shared between all model parts.",
			"modelPartsRotationReset" : true,
			
			"_comment227" : "Option 'layersAllowed' tells the mod whether it should attempt to render multiple layers of the entity model. The default value is true.",
			"_comment228" : "For example, such layers could include hats, helmets, glow effects etc.",
			"_comment229" : "The mod will automatically trace the rendering process of the entity renderer to determine the additional layers to render.",
			"_comment231" : "On Minecraft 1.15.2 and newer, this requires the main entity model to be a subclass of SegmentedModel or AgeableModel (AKA CompositeEntityModel and AnimalModel on Fabric), ...",
			"_comment232" : "... which includes subclasses of BipedModel and QuadrupedModel. The render method of the super class must be called from the render method of your model class (usually is).",
			"layersAllowed" : true
		},
		
		{
			"_comment302" : "This is the configuration at position 1 (second), which is used for variant 'example_mod:textures/entity/example_entity/example_entity.png%HAPPY%YELLOW%5' in this example.",
			
			"baseScale" : 0.5,
			"offsetX" : 5,
			"offsetY" : -5
		},
		
		{
			"_comment303" : "This is the configuration at position 2 (third), which is not used for any variant of this entity type.",
			
			"renderingFullModel" : true
		}
	]
}